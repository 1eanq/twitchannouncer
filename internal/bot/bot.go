package bot

import (
	"context"
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"
	"time"

	"twitchannouncer/internal/config"
	"twitchannouncer/internal/database"
	"twitchannouncer/internal/yookassa"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var userState = make(map[int64]string)
var userData database.UserData
var subscriptionData database.SubscriptionData

func StartBot(cfg config.Config, bot *tgbotapi.BotAPI, db *database.DB) {
	ctx := context.Background()
	monitor := NewMonitor(bot, db, cfg)
	go monitor.Start(ctx, 10*time.Second)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.CallbackQuery != nil {
			handleCallbackQuery(bot, db, update.CallbackQuery)
			continue
		}
		if update.Message == nil {
			continue
		}
		handleUpdate(bot, db, update)
	}
}

func handleCallbackQuery(bot *tgbotapi.BotAPI, db *database.DB, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	messageID := callback.Message.MessageID
	userID := callback.From.ID
	data := callback.Data

	switch {
	case strings.HasPrefix(data, "list_page_"):
		pageStr := strings.TrimPrefix(data, "list_page_")
		page, _ := strconv.Atoi(pageStr)
		subs, _ := db.GetUserSubscriptions(userID)

		msgText, keyboard := buildSubscriptionPage(subs, page)
		edit := tgbotapi.NewEditMessageText(chatID, messageID, msgText)
		edit.ParseMode = "Markdown"
		edit.ReplyMarkup = &keyboard
		bot.Send(edit)

	case strings.HasPrefix(data, "delete_sub_"):
		idStr := strings.TrimPrefix(data, "delete_sub_")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
			return
		}

		subscriptions, _ := db.GetUserSubscriptions(userID)
		var sub *database.SubscriptionData
		for _, s := range subscriptions {
			if s.ID == id {
				sub = &s
				break
			}
		}
		if sub == nil {
			bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."))
			return
		}

		text := fmt.Sprintf("‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É `%s ‚Üí %s`?", sub.TwitchUsername, sub.ChannelName)
		edit := tgbotapi.NewEditMessageTextAndMarkup(chatID, messageID, text,
			tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", fmt.Sprintf("confirm_sub_%d", sub.ID)),
					tgbotapi.NewInlineKeyboardButtonData("üîô –û—Ç–º–µ–Ω–∞", "list_page_0"),
				),
			),
		)
		edit.ParseMode = "Markdown"
		bot.Send(edit)

	case strings.HasPrefix(data, "confirm_sub_"):
		idStr := strings.TrimPrefix(data, "confirm_sub_")
		id, err := strconv.Atoi(idStr)
		if err != nil {
			log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
			bot.Send(tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"))
			return
		}

		err = db.DeleteSubscriptionByID(id)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
			bot.Send(tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"))
			return
		}

		text := "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."
		edit := tgbotapi.NewEditMessageText(chatID, messageID, text)
		edit.ParseMode = "Markdown"
		bot.Send(edit)
	}

	bot.Request(tgbotapi.NewCallback(callback.ID, ""))
}

func buildSubscriptionPage(subs []database.SubscriptionData, page int) (string, tgbotapi.InlineKeyboardMarkup) {
	const perPage = 5
	start := page * perPage
	end := start + perPage
	if end > len(subs) {
		end = len(subs)
	}
	paginated := subs[start:end]

	var msg strings.Builder
	msg.WriteString("–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n")
	rows := [][]tgbotapi.InlineKeyboardButton{}

	for _, sub := range paginated {
		text := fmt.Sprintf("%s ‚Üí %s", sub.TwitchUsername, sub.ChannelName)
		callbackData := fmt.Sprintf("delete_sub_%d", sub.ID) // —Ç–æ–ª—å–∫–æ ID

		button := tgbotapi.NewInlineKeyboardButtonData(text, callbackData)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(button))
	}

	navRow := []tgbotapi.InlineKeyboardButton{}
	if page > 0 {
		navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("‚¨Ö –ù–∞–∑–∞–¥", fmt.Sprintf("list_page_%d", page-1)))
	}
	if end < len(subs) {
		navRow = append(navRow, tgbotapi.NewInlineKeyboardButtonData("–í–ø–µ—Ä—ë–¥ ‚û°", fmt.Sprintf("list_page_%d", page+1)))
	}
	if len(navRow) > 0 {
		rows = append(rows, navRow)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)
	return msg.String(), keyboard
}

func handleUpdate(bot *tgbotapi.BotAPI, db *database.DB, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	if update.Message.IsCommand() {
		handleCommand(bot, db, update)
		return
	}

	switch userState[chatID] {
	case "awaiting_username":
		handleAwaitingUsername(bot, update)
	case "awaiting_channel":
		handleAwaitingChannel(bot, db, update)
	case "awaiting_email":
		handleAwaitingEmail(bot, db, update)
	}
}

func handleCommand(bot *tgbotapi.BotAPI, db *database.DB, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	switch update.Message.Command() {
	case "start":
		bot.Send(tgbotapi.NewMessage(chatID, "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–º–∞—Ö.\n/help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥!"))
	case "help":
		helpText := `üìå *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*
			/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
			/new ‚Äî ‚ûï –î–æ–±–∞–≤–∏—Ç—å Twitch-–ø–æ–¥–ø–∏—Å–∫—É
			/list ‚Äî üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏`
		msg := tgbotapi.NewMessage(chatID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
	case "new":
		bot.Send(tgbotapi.NewMessage(chatID, "–ù–∞–ø–∏—à–∏ Twitch username:"))
		userState[chatID] = "awaiting_username"
		userData.TelegramID = update.Message.From.ID
		userData.TelegramUsername = update.Message.From.UserName
	case "list":
		subs, err := db.GetUserSubscriptions(update.Message.From.ID)
		if err != nil || len(subs) == 0 {
			bot.Send(tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö Twitch-—é–∑–µ—Ä–Ω–µ–π–º–æ–≤."))
			return
		}
		msgText, keyboard := buildSubscriptionPage(subs, 0)
		msg := tgbotapi.NewMessage(chatID, msgText)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		bot.Send(msg)
	case "delete":
		bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ Twitch username, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"))
		userState[chatID] = "awaiting_delete_username"
	case "pro":
		handleProCommand(bot, db, update)
	default:
		bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"))
	}
}

func handleAwaitingUsername(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	subscriptionData.TwitchUsername = strings.ToLower(strings.TrimSpace(update.Message.Text))
	bot.Send(tgbotapi.NewMessage(chatID, "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞\n–ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–º!"))
	userState[chatID] = "awaiting_channel"
}

func handleAwaitingChannel(bot *tgbotapi.BotAPI, db *database.DB, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	if update.Message.ForwardFromChat != nil && update.Message.ForwardFromChat.Type == "channel" {
		subscriptionData.ChannelID = update.Message.ForwardFromChat.ID
		subscriptionData.ChannelName = update.Message.ForwardFromChat.UserName
		userState[chatID] = ""

		subscriptionData.UserID = userData.TelegramID
		err := db.StoreData(userData, subscriptionData)
		if err != nil {
			text := "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
			log.Println(err)
			bot.Send(tgbotapi.NewMessage(chatID, text))
			return
		}

		text := fmt.Sprintf("–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–∞—Ö %s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª @%s", subscriptionData.TwitchUsername, subscriptionData.ChannelName)
		bot.Send(tgbotapi.NewMessage(chatID, text))
	} else {
		bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID."))
	}
}

func handleAwaitingEmail(bot *tgbotapi.BotAPI, db *database.DB, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	email := strings.TrimSpace(update.Message.Text)

	if !isValidEmail(email) {
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email."))
		return
	}
	userData.TelegramID = update.Message.From.ID
	userData.Email = email

	db.UpdateUserEmail(userData)

	userState[chatID] = ""

}

func handleProCommand(bot *tgbotapi.BotAPI, db *database.DB, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	userID := update.Message.From.ID

	description := `üåü *–ü–æ–¥–ø–∏—Å–∫–∞ Pro* –¥–∞—ë—Ç –≤–∞–º:
- üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
- üìà –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
- üö´ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ–π —Ä–µ–∫–ª–∞–º—ã
–°—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî –≤—Å–µ–≥–æ *50‚ÇΩ –≤ –º–µ—Å—è—Ü*`

	isPro, expiry, err := db.IsUserPro(userID)
	if err != nil {
		log.Printf("DB error: %v", err)
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}

	if isPro {
		text := fmt.Sprintf("%s\n\n‚úÖ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ *Pro* –¥–æ *%s*.", description, expiry.Format("02.01.2006"))
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
		return
	}

	email, err := db.GetUserEmail(userID)
	if err != nil {
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email")
		bot.Send(msg)
		userState[chatID] = "awaiting_email"
		return
	}

	if email == "" {
		msg := tgbotapi.NewMessage(chatID, "‚ùó Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ email –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		bot.Send(msg)
		return
	}

	client := yookassa.NewClient()
	payURL, err := client.CreatePayment(userID, email)
	if err != nil {
		log.Printf("YooKassa error (user %d): %v", userID, err)
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}

	amount := "50‚ÇΩ"
	msgText := fmt.Sprintf("%s\n\nüí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å *%s* –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:", description, amount)

	button := tgbotapi.NewInlineKeyboardButtonURL("–û–ø–ª–∞—Ç–∏—Ç—å "+amount, payURL)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(button),
	)

	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	bot.Send(msg)
}

func StartProExpiryChecker(bot *tgbotapi.BotAPI, db *database.DB, interval time.Duration) {
	ticker := time.NewTicker(interval)
	go func() {
		for range ticker.C {
			err := db.RemoveExpiredProUsers(bot)
			if err != nil {
				log.Printf("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: %v", err)
			}
		}
	}()
}

func isValidEmail(email string) bool {
	// –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
	re := regexp.MustCompile(`^[a-zA-Z0-9._%+\-]+@[a-zA-Z0-9.\-]+\.[a-zA-Z]{2,}$`)
	return re.MatchString(email)
}
