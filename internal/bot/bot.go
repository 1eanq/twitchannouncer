package bot

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"
	"twitchannouncer/internal/config"
	"twitchannouncer/internal/database"
	"twitchannouncer/internal/yookassa"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var userState = make(map[int64]string)
var deleteTemp = make(map[int64]database.UserData)
var data database.UserData

func StartBot(cfg config.Config, bot *tgbotapi.BotAPI, db *database.DB) {
	ctx := context.Background()
	monitor := NewMonitor(bot, db, cfg)
	go monitor.Start(ctx, 5*time.Second)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}
		handleUpdate(bot, db, update)
	}
}

func handleUpdate(bot *tgbotapi.BotAPI, db *database.DB, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	if update.Message.IsCommand() {
		handleCommand(bot, db, update)
		return
	}

	switch userState[chatID] {
	case "awaiting_username":
		handleAwaitingUsername(bot, update)
	case "awaiting_channel":
		handleAwaitingChannel(bot, db, update)
	case "awaiting_delete_username":
		handleAwaitingDeleteUsername(bot, update)
	case "awaiting_delete_channel":
		handleAwaitingDeleteChannel(bot, db, update)
	}
}

func handleCommand(bot *tgbotapi.BotAPI, db *database.DB, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	switch update.Message.Command() {
	case "start":
		bot.Send(tgbotapi.NewMessage(chatID, "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–º–∞—Ö.\n/help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥!"))
	case "help":
		helpText := `üìå *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*
/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/new ‚Äî ‚ûï –î–æ–±–∞–≤–∏—Ç—å Twitch-–ø–æ–¥–ø–∏—Å–∫—É
/list ‚Äî üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏
/delete ‚Äî ‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –Ω–∏–∫—É –∏ ID`
		msg := tgbotapi.NewMessage(chatID, helpText)
		msg.ParseMode = "Markdown"
		bot.Send(msg)
	case "new":
		bot.Send(tgbotapi.NewMessage(chatID, "–ù–∞–ø–∏—à–∏ Twitch username:"))
		userState[chatID] = "awaiting_username"
		data.TelegramID = update.Message.From.ID
		data.TelegramUsername = update.Message.From.UserName
	case "list":
		handleListCommand(bot, db, update)
	case "delete":
		bot.Send(tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ Twitch username, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"))
		userState[chatID] = "awaiting_delete_username"
	case "pro":
		handleProCommand(bot, db, update)
	default:
		bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"))
	}
}

func handleListCommand(bot *tgbotapi.BotAPI, db *database.DB, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	subs, err := db.GetUserSubscriptions(update.Message.From.ID)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫."))
		fmt.Println(err.Error())
		return
	}

	if len(subs) == 0 {
		bot.Send(tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö Twitch-—é–∑–µ—Ä–Ω–µ–π–º–æ–≤."))
		return
	}

	var msg strings.Builder
	msg.WriteString("–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n")
	for _, sub := range subs {
		msg.WriteString(fmt.Sprintf("- %s ‚Üí %s\n", sub.TwitchUsername, sub.ChannelName))
	}

	bot.Send(tgbotapi.NewMessage(chatID, msg.String()))
}

func handleAwaitingUsername(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	data.TwitchUsername = strings.ToLower(strings.TrimSpace(update.Message.Text))
	bot.Send(tgbotapi.NewMessage(chatID, "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞\n–ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–º!"))
	userState[chatID] = "awaiting_channel"
}

func handleAwaitingChannel(bot *tgbotapi.BotAPI, db *database.DB, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	if update.Message.ForwardFromChat != nil && update.Message.ForwardFromChat.Type == "channel" {
		data.ChannelID = update.Message.ForwardFromChat.ID
		data.ChannelName = update.Message.ForwardFromChat.UserName
		userState[chatID] = ""

		err := db.StoreData(data)
		if err != nil {
			if strings.Contains(err.Error(), "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç") {
				bot.Send(tgbotapi.NewMessage(chatID, "–¢–∞–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"))
			} else {
				bot.Send(tgbotapi.NewMessage(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."))
			}
			return
		}

		bot.Send(tgbotapi.NewMessage(chatID,
			fmt.Sprintf("–û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–∞—Ö %s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª @%s", data.TwitchUsername, data.ChannelName)))
	} else {
		bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID."))
	}
}

func handleAwaitingDeleteUsername(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	deleteTemp[chatID] = database.UserData{
		TelegramID:       update.Message.From.ID,
		TelegramUsername: update.Message.From.UserName,
		TwitchUsername:   strings.ToLower(strings.TrimSpace(update.Message.Text)),
	}
	bot.Send(tgbotapi.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —ç—Ç–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º:"))
	userState[chatID] = "awaiting_delete_channel"
}

func handleAwaitingDeleteChannel(bot *tgbotapi.BotAPI, db *database.DB, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	dataToDelete := deleteTemp[chatID]

	if update.Message.ForwardFromChat != nil && update.Message.ForwardFromChat.Type == "channel" {
		dataToDelete.ChannelID = update.Message.ForwardFromChat.ID
		dataToDelete.ChannelName = update.Message.ForwardFromChat.UserName

		err := db.DeleteData(dataToDelete)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(chatID, err.Error()))
		} else {
			bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"))
		}

		userState[chatID] = ""
		delete(deleteTemp, chatID)
	} else {
		bot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."))
	}
}

func handleProCommand(bot *tgbotapi.BotAPI, db *database.DB, update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	userID := update.Message.From.ID

	isPro, err := db.IsUserPro(userID)
	if err != nil {
		log.Printf("DB error: %v", err)
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}

	if isPro {
		bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Pro. –°–ø–∞—Å–∏–±–æ!"))
		return
	}

	client := yookassa.NewClient()
	payURL, err := client.CreatePayment(userID)
	if err != nil {
		log.Printf("YooKassa error (user %d): %v", userID, err)
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
		return
	}

	msg := fmt.Sprintf("üí≥ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ Pro –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ:\n%s", payURL)
	bot.Send(tgbotapi.NewMessage(chatID, msg))
}

func StartProExpiryChecker(bot *tgbotapi.BotAPI, db *database.DB, interval time.Duration) {
	ticker := time.NewTicker(interval)
	go func() {
		for range ticker.C {
			err := db.RemoveExpiredProUsers(bot)
			if err != nil {
				log.Printf("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: %v", err)
			}
		}
	}()
}
